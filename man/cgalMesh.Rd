% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cgalMesh.R
\name{cgalMesh}
\alias{cgalMesh}
\title{R6 class to represent a CGAL mesh}
\description{
R6 class to represent a CGAL mesh.
}
\examples{

## ------------------------------------------------
## Method `cgalMesh$new`
## ------------------------------------------------

library(rgl)
cgalMesh$new(cube3d())

## ------------------------------------------------
## Method `cgalMesh$boundsVolume`
## ------------------------------------------------

library(rgl)
mesh <- cgalMesh$new(tetrahedron3d())
mesh$boundsVolume() # TRUE
mesh$reverseOrientation()
mesh$boundsVolume() # TRUE

## ------------------------------------------------
## Method `cgalMesh$centroid`
## ------------------------------------------------

library(rgl)
mesh <- cgalMesh$new(icosahedron3d())
mesh$centroid()

## ------------------------------------------------
## Method `cgalMesh$copy`
## ------------------------------------------------

library(rgl)
mesh <- cgalMesh$new(cube3d())
tmesh <- mesh$copy()$triangulate()
tmesh$isTriangle() # TRUE
mesh$isTriangle() # FALSE

## ------------------------------------------------
## Method `cgalMesh$edges`
## ------------------------------------------------

library(rgl)
mesh <- cgalMesh$new(dodecahedron3d())
mesh$edges()

## ------------------------------------------------
## Method `cgalMesh$getMesh`
## ------------------------------------------------

library(rgl)
mesh <- cgalMesh$new(cube3d())$triangulate()
mesh$getMesh(normals = FALSE)

## ------------------------------------------------
## Method `cgalMesh$isTriangle`
## ------------------------------------------------

library(rgl)
mesh <- cgalMesh$new(cube3d())
mesh$isTriangle()

## ------------------------------------------------
## Method `cgalMesh$selfIntersects`
## ------------------------------------------------

library(rgl)
mesh <- cgalMesh$new(cube3d())
mesh$selfIntersects()

## ------------------------------------------------
## Method `cgalMesh$triangulate`
## ------------------------------------------------

library(rgl)
mesh <- cgalMesh$new(cube3d())
mesh$isTriangle() # FALSE
# warning: triangulating the mesh modifies it
x <- mesh$triangulate()
mesh$isTriangle() # TRUE
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-cgalMesh-new}{\code{cgalMesh$new()}}
\item \href{#method-cgalMesh-print}{\code{cgalMesh$print()}}
\item \href{#method-cgalMesh-boundsVolume}{\code{cgalMesh$boundsVolume()}}
\item \href{#method-cgalMesh-centroid}{\code{cgalMesh$centroid()}}
\item \href{#method-cgalMesh-copy}{\code{cgalMesh$copy()}}
\item \href{#method-cgalMesh-edges}{\code{cgalMesh$edges()}}
\item \href{#method-cgalMesh-getMesh}{\code{cgalMesh$getMesh()}}
\item \href{#method-cgalMesh-isClosed}{\code{cgalMesh$isClosed()}}
\item \href{#method-cgalMesh-isTriangle}{\code{cgalMesh$isTriangle()}}
\item \href{#method-cgalMesh-reverseOrientation}{\code{cgalMesh$reverseOrientation()}}
\item \href{#method-cgalMesh-selfIntersects}{\code{cgalMesh$selfIntersects()}}
\item \href{#method-cgalMesh-triangulate}{\code{cgalMesh$triangulate()}}
\item \href{#method-cgalMesh-vertices}{\code{cgalMesh$vertices()}}
\item \href{#method-cgalMesh-writeMeshFile}{\code{cgalMesh$writeMeshFile()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cgalMesh-new"></a>}}
\if{latex}{\out{\hypertarget{method-cgalMesh-new}{}}}
\subsection{Method \code{new()}}{
Creates a new \code{cgalMesh} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cgalMesh$new(mesh, vertices, faces, clean = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{mesh}}{there are four possibilities for this argument: it can be 
missing, in which case the arguments \code{vertices} and \code{faces} 
must be given, or it can be the path to a mesh file (accepted formats: 
\code{off}, \code{obj}, \code{stl}, \code{ply}, \code{ts}, \code{vtp}),
or it can be a \strong{rgl} mesh (i.e. a \code{mesh3d} object), or it 
can be a list containing (at least) the fields \code{vertices} 
(numeric matrix with three columns) and \code{faces} (matrix of 
integers or list of vectors of integers)}

\item{\code{vertices}}{if \code{mesh} is missing, must be a numeric matrix with 
three columns}

\item{\code{faces}}{if \code{mesh} is missing, must be either a matrix of 
integers (each row gives the vertex indices of a face) or a list of 
vectors of integers (each one gives the vertex indices of a face)}

\item{\code{clean}}{Boolean, no effect if the mesh is given by a file, 
otherwise it indicates whether to clean the mesh (merge duplicated 
vertices and duplicated faces, remove isolated vertices); set to 
\code{FALSE} if you know your mesh is already clean}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{cgalMesh} object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{library(rgl)
cgalMesh$new(cube3d())
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cgalMesh-print"></a>}}
\if{latex}{\out{\hypertarget{method-cgalMesh-print}{}}}
\subsection{Method \code{print()}}{
Print a \code{cgalMesh} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cgalMesh$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
No value returned, just prints some information about the mesh.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cgalMesh-boundsVolume"></a>}}
\if{latex}{\out{\hypertarget{method-cgalMesh-boundsVolume}{}}}
\subsection{Method \code{boundsVolume()}}{
Check whether the mesh bounds a volume. The mesh must be 
  triangle.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cgalMesh$boundsVolume()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A Boolean value, whether the mesh bounds a volume.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{library(rgl)
mesh <- cgalMesh$new(tetrahedron3d())
mesh$boundsVolume() # TRUE
mesh$reverseOrientation()
mesh$boundsVolume() # TRUE
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cgalMesh-centroid"></a>}}
\if{latex}{\out{\hypertarget{method-cgalMesh-centroid}{}}}
\subsection{Method \code{centroid()}}{
Centroid of the mesh. The mesh must be triangle.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cgalMesh$centroid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The Cartesian coordinates of the centroid of the mesh.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{library(rgl)
mesh <- cgalMesh$new(icosahedron3d())
mesh$centroid()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cgalMesh-copy"></a>}}
\if{latex}{\out{\hypertarget{method-cgalMesh-copy}{}}}
\subsection{Method \code{copy()}}{
Copy the mesh.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cgalMesh$copy()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A new \code{cgalMesh} object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{library(rgl)
mesh <- cgalMesh$new(cube3d())
tmesh <- mesh$copy()$triangulate()
tmesh$isTriangle() # TRUE
mesh$isTriangle() # FALSE
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cgalMesh-edges"></a>}}
\if{latex}{\out{\hypertarget{method-cgalMesh-edges}{}}}
\subsection{Method \code{edges()}}{
Get the edges of the mesh.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cgalMesh$edges()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A dataframe with four columns; the first two ones give the 
  vertex indices of each edge (one edge per row), the third one gives 
  the lengths of each edge, and the fourth one gives the dihedral angles 
  in degrees between the two faces adjacent to each edge
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{library(rgl)
mesh <- cgalMesh$new(dodecahedron3d())
mesh$edges()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cgalMesh-getMesh"></a>}}
\if{latex}{\out{\hypertarget{method-cgalMesh-getMesh}{}}}
\subsection{Method \code{getMesh()}}{
Get the mesh.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cgalMesh$getMesh(normals = TRUE, rgl = TRUE, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{normals}}{Boolean, whether to return the per-vertex normals}

\item{\code{rgl}}{Boolean, whether to return a \strong{rgl} mesh if possible, 
i.e. if the mesh only has triangular or quadrilateral faces}

\item{\code{...}}{arguments passed to \code{\link[rgl:mesh3d]{mesh3d}} (if 
a \strong{rgl} mesh is returned)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \strong{rgl} mesh or a list with two or three fields: 
  \code{vertices}, \code{faces}, and \code{normals} if the argument 
  \code{normals} is set to \code{TRUE}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{library(rgl)
mesh <- cgalMesh$new(cube3d())$triangulate()
mesh$getMesh(normals = FALSE)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cgalMesh-isClosed"></a>}}
\if{latex}{\out{\hypertarget{method-cgalMesh-isClosed}{}}}
\subsection{Method \code{isClosed()}}{
Check whether the mesh is closed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cgalMesh$isClosed()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A Boolean value, whether the mesh is closed.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cgalMesh-isTriangle"></a>}}
\if{latex}{\out{\hypertarget{method-cgalMesh-isTriangle}{}}}
\subsection{Method \code{isTriangle()}}{
Check whether the mesh is triangle.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cgalMesh$isTriangle()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A Boolean value, whether the mesh is triangle.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{library(rgl)
mesh <- cgalMesh$new(cube3d())
mesh$isTriangle()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cgalMesh-reverseOrientation"></a>}}
\if{latex}{\out{\hypertarget{method-cgalMesh-reverseOrientation}{}}}
\subsection{Method \code{reverseOrientation()}}{
Reverse the orientation of the faces of the mesh.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cgalMesh$reverseOrientation()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The modified \code{cgalMesh} object. \strong{WARNING}: even if 
  you store the result in a new variable, the original mesh is modified.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cgalMesh-selfIntersects"></a>}}
\if{latex}{\out{\hypertarget{method-cgalMesh-selfIntersects}{}}}
\subsection{Method \code{selfIntersects()}}{
Check whether the mesh self-intersects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cgalMesh$selfIntersects()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A Boolean value, whether the mesh self-intersects.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{library(rgl)
mesh <- cgalMesh$new(cube3d())
mesh$selfIntersects()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cgalMesh-triangulate"></a>}}
\if{latex}{\out{\hypertarget{method-cgalMesh-triangulate}{}}}
\subsection{Method \code{triangulate()}}{
Triangulate mesh.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cgalMesh$triangulate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The modified \code{cgalMesh} object. \strong{WARNING}: even if 
  you store the result in a new variable, the original mesh is modified 
  (see the example). You may want to triangulate a copy of the mesh; 
  see the \code{copy} method.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{library(rgl)
mesh <- cgalMesh$new(cube3d())
mesh$isTriangle() # FALSE
# warning: triangulating the mesh modifies it
x <- mesh$triangulate()
mesh$isTriangle() # TRUE
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cgalMesh-vertices"></a>}}
\if{latex}{\out{\hypertarget{method-cgalMesh-vertices}{}}}
\subsection{Method \code{vertices()}}{
Get the vertices of the mesh.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cgalMesh$vertices()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The vertices in a matrix.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cgalMesh-writeMeshFile"></a>}}
\if{latex}{\out{\hypertarget{method-cgalMesh-writeMeshFile}{}}}
\subsection{Method \code{writeMeshFile()}}{
Write mesh to a file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cgalMesh$writeMeshFile(filename, precision = 17, binary = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filename}}{path to the file to be written, with extension 
\code{off} or \code{ply}}

\item{\code{precision}}{a positive integer, the desired number of decimal 
places}

\item{\code{binary}}{Boolean, whether to write a binary PLY file if 
\code{filename} has the \code{ply} extension}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Nothing, just writes a file.
}
}
}
